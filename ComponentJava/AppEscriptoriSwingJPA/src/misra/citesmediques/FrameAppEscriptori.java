/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package misra.citesmediques;

import java.awt.Component;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import misra.citesmediques.persistence.IGestorCitesMediques;

/**
 *
 * @author misra
 */
public class FrameAppEscriptori extends javax.swing.JFrame {
    private static List<Metge> metges = new ArrayList();
    private static IGestorCitesMediques cp;
    private DefaultListModel<String> modelEsp = new DefaultListModel<>();
    private Metge selectedMetge = null;
    private Especialitats especialitatSeleccionada = null;
    private String selectedEspName = "";
    /**
     * Creates new form FrameAppEscriptori
     */
    public FrameAppEscriptori() {
        initComponents();
        setLocationRelativeTo(null);
        actualizarListaMetges(cp.getMetges());
        actualizarSelectorEsp(cp.getEspecialitats());
        //cp.getCita(WIDTH);
        //escoltarEspSeleccionada();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jOptionPane1 = new javax.swing.JOptionPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listMetge = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listEspecialitats = new javax.swing.JList<>();
        btnAddEsp = new javax.swing.JButton();
        btnRemoveEsp = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtCodiEmp = new javax.swing.JTextField();
        txtNif = new javax.swing.JTextField();
        txtNom = new javax.swing.JTextField();
        txtPoblacio = new javax.swing.JTextField();
        txtCogn1 = new javax.swing.JTextField();
        txtadreca = new javax.swing.JTextField();
        txtCogn2 = new javax.swing.JTextField();
        txtSexe = new javax.swing.JTextField();
        selectorEsspec = new javax.swing.JComboBox<>();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GESTIÓ DE METGES PER ESPECIALITAT");
        setBackground(new java.awt.Color(51, 153, 255));
        setResizable(false);

        jLabel1.setBackground(new java.awt.Color(153, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GESTIÓ DE METGES PER ESPECIALITAT");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Metge");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Especialitats");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Dades Metge");

        listMetge.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listMetge);

        listEspecialitats.setForeground(new java.awt.Color(0, 0, 255));
        jScrollPane2.setViewportView(listEspecialitats);

        btnAddEsp.setText("Afegeix");
        btnAddEsp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEspActionPerformed(evt);
            }
        });

        btnRemoveEsp.setText("Elimina");
        btnRemoveEsp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEspActionPerformed(evt);
            }
        });

        jLabel5.setText("Codi Empleat");

        jLabel6.setText("Nif");

        jLabel7.setText("Nom");

        jLabel8.setText("Cognom1");

        jLabel9.setText("Cognom2");

        jLabel10.setText("Adreça");

        jLabel11.setText("Població");

        jLabel12.setText("Sexe");

        txtCodiEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodiEmpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCogn1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNom, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNif, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCodiEmp, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtCogn2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtadreca, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPoblacio, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(txtSexe))))
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtCodiEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCogn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtCogn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtadreca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtPoblacio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(txtSexe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        selectorEsspec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectorEsspec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorEsspecActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(312, 312, 312)
                .addComponent(jLabel3)
                .addGap(130, 130, 130))
            .addGroup(layout.createSequentialGroup()
                .addGap(348, 348, 348)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(selectorEsspec, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnAddEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(btnRemoveEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(selectorEsspec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAddEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnRemoveEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodiEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodiEmpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodiEmpActionPerformed

    
    private void selectorEsspecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorEsspecActionPerformed
        vaciarCampos(jPanel1);
        String valorSeleccionado = (String) selectorEsspec.getSelectedItem();
        if(valorSeleccionado.equals("Todas las Especialidades")){
            actualizarListaMetges(cp.getMetges());
            vaciarCampos(jPanel1);
            modelEsp.removeAllElements();
        }else{
            actualizarListaMetges(cp.getMetgePerEspecialitats(cp.getCodiEspecialitatPerNom(valorSeleccionado)));
            vaciarCampos(jPanel1);
            modelEsp.removeAllElements();
        }
    }//GEN-LAST:event_selectorEsspecActionPerformed

    private void btnAddEspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEspActionPerformed
        
        List<Especialitats> listEsp = new ArrayList(cp.getEspecialitats());
        List<Especialitats> listEspMetgeSelecc = new ArrayList(cp.getEspecialitatsMetge(selectedMetge.getCodi()));
        
        String[] opciones = new String[listEsp.size()];
        int i = 0;
        for(Especialitats esp:listEsp){
            opciones[i] = esp.getNomEspecialitat();
            i++; 
        }
        
        int seleccion = jOptionPane1.showOptionDialog(null, "Elige una opción", "Agregar Especialidades", 
        JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, opciones, opciones[0]);
        boolean estaEnLista = false;
        if (seleccion >= 0) {
            for(Especialitats esp:listEspMetgeSelecc){
                if(esp.getNomEspecialitat().equals(opciones[seleccion])){
                    estaEnLista = true;
                    jOptionPane1.showMessageDialog(null, "Esta especialidad ya ha sido agregada");
                }
            } 
            
            if(!estaEnLista){
                modelEsp.addElement(opciones[seleccion]);
                listEspecialitats.setModel(modelEsp);
                Especialitats especialitat = cp.getEspecialitat(cp.getCodiEspecialitatPerNom(opciones[seleccion]));
                if(especialitat!=null){
                    cp.addEspecialitatMetge(especialitat, selectedMetge.getCodi());
                    cp.commit(); 
                }
                
                
            }
        }

    }//GEN-LAST:event_btnAddEspActionPerformed

    private void btnRemoveEspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEspActionPerformed
        String nomESp = listEspecialitats.getSelectedValue();
        Especialitats espSeleccionada = cp.getEspecialitat(cp.getCodiEspecialitatPerNom(nomESp));
        if (espSeleccionada != null) {
            modelEsp.removeElement(nomESp);
            listEspecialitats.setModel(modelEsp);
            cp.removeEspecialitatMetge(espSeleccionada, selectedMetge.getCodi());
            cp.commit();
            jOptionPane1.showMessageDialog(null, "Especialidad eliminada "+nomESp);
        }
    }//GEN-LAST:event_btnRemoveEspActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameAppEscriptori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameAppEscriptori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameAppEscriptori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameAppEscriptori.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        String nomFitxer = null;
        if (args.length == 0) {
            nomFitxer = "infoCapa.properties";
        } else {
            nomFitxer = args[0];
        }

        Properties props = new Properties();
        try {
            props.load(new FileReader(nomFitxer));
        } catch (FileNotFoundException ex) {
            System.out.println("No es troba fitxer de propietats " + nomFitxer);
            infoError(ex);
            System.out.println("Avortem aplicació");
            return;
        } catch (IOException ex) {
            System.out.println("Error en carregar fitxer de propietats " + nomFitxer);
            infoError(ex);
            System.out.println("Avortem aplicació");
            return;
        }

        String nomCapa = props.getProperty("nomCapa");
        if (nomCapa == null || nomCapa.equals("")) {
            System.out.println("Fitxer de propietats " + nomFitxer + " no conté propietat nomCapa");
            System.out.println("Avortem aplicació");
            return;
        }
        String nomFitxerConfiguracioCapa = props.getProperty("nomFitxerConfiguracioCapa");
        if (nomFitxerConfiguracioCapa == null || nomFitxerConfiguracioCapa.equals("")) {
            System.out.println("Fitxer de propietats " + nomFitxer + " no conté propietat nomFitxerConfiguracioCapa");
            System.out.println("Avortem aplicació");
            return;
        }

        
        try {
            Class compo = Class.forName(nomCapa);
            Constructor c = compo.getConstructor(String.class);
            cp = (IGestorCitesMediques) c.newInstance(nomFitxerConfiguracioCapa);
        } catch (ClassNotFoundException | NoSuchMethodException | SecurityException | InstantiationException
                | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
            System.out.println("Problema en crear capa de persistència");
            infoError(ex);
            return;
        }
        
        

        System.out.println("Connexió establerta");
        /* Treball amb la capa */
        
        //actualizarListaMetges(cp.getMetges());
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameAppEscriptori().setVisible(true);
                //metges = cp.getMetges();
                //jLabel1.setText("Nuevo texto");

            }
        });
    }
    
    private static void infoError(Throwable aux) {
            do {
                if (aux.getMessage() != null) {
                    System.out.println("\t" + aux.getMessage());
                }
                aux = aux.getCause();
            } while (aux != null);
        }
    
    public void actualizarListaMetges(List<Metge> metges) {
        DefaultListModel<String> emptyModel = new DefaultListModel<>();
        
       
        DefaultListModel<String> model = new DefaultListModel<>();
        for (Metge m : metges) {
            model.addElement(m.getNom());
        }
        listMetge.setModel(model);
        // Agrega un listener al JList para manejar los eventos de selección
        listMetge.addListSelectionListener(e -> {
            
            if (!e.getValueIsAdjusting()) {
                String selectedMetgeName = listMetge.getSelectedValue(); // Obtiene el nombre seleccionado
                listEspecialitats.setModel(emptyModel);
                for (Metge m : metges) {
                    if (m.getNom().equals(selectedMetgeName)) { // Busca el objeto Metge correspondiente
                        selectedMetge = m;
                        break;
                    }
                }
                // Ahora puedes usar el objeto Metge seleccionado en la lista
                if (selectedMetge != null) {
                    modelEsp.removeAllElements();
                    //llenamos lista de datos personales del metge
                    txtCodiEmp.setText(""+selectedMetge.getCodiEmpleat());
                    txtNif.setText(""+selectedMetge.getNif());
                    txtNom.setText(selectedMetgeName);
                    txtCogn1.setText(""+selectedMetge.getCognom1());
                    txtCogn2.setText(""+selectedMetge.getCognom2());
                    txtadreca.setText(""+selectedMetge.getAdreca());
                    txtPoblacio.setText(""+selectedMetge.getPoblacio());
                    if(selectedMetge.getSexe()==0){
                        txtSexe.setText("Dona");
                    }else{
                        txtSexe.setText("Home");
                    }
                    //txtSexe.setText(""+selectedMetge.getSexe());
                    //Llenamos lista de especialidades del metge
                    List<Especialitats> espMetge = cp.getEspecialitatsMetge(selectedMetge.getCodi());
                    listEspecialitats.setModel(emptyModel);
                    for (Especialitats esp : espMetge) {
                        modelEsp.addElement(esp.getNomEspecialitat());
                    }
                    bloquearEdicionJTextField(jPanel1);
                    listEspecialitats.setModel(modelEsp);
                    espMetge.clear();
                }
            }
        });
    }
    
    public void actualizarListEspecialitats(String especialitat) {
        
    }
    
    public void actualizarSelectorEsp(List<Especialitats> esp) {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Todas las Especialidades");
        for (Especialitats e : esp) {
            model.addElement(e.getNomEspecialitat());
        }
        selectorEsspec.setModel(model);
        
    }
    
    public void vaciarCampos(JPanel panel) {
        Component[] components = panel.getComponents();
        for (Component component : components) {
            if (component instanceof JTextField) {
                ((JTextField) component).setText("");
            }
        }
    }
    
    private void bloquearEdicionJTextField(JPanel panel) {
        Component[] components = panel.getComponents();
        for (Component component : components) {
            if (component instanceof JTextField) {
                ((JTextField) component).setEnabled(false);
                
            } 
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEsp;
    private javax.swing.JButton btnRemoveEsp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listEspecialitats;
    private javax.swing.JList<String> listMetge;
    private javax.swing.JComboBox<String> selectorEsspec;
    private javax.swing.JTextField txtCodiEmp;
    private javax.swing.JTextField txtCogn1;
    private javax.swing.JTextField txtCogn2;
    private javax.swing.JTextField txtNif;
    private javax.swing.JTextField txtNom;
    private javax.swing.JTextField txtPoblacio;
    private javax.swing.JTextField txtSexe;
    private javax.swing.JTextField txtadreca;
    // End of variables declaration//GEN-END:variables

    private void escoltarEspSeleccionada() {
        listEspecialitats.addListSelectionListener(e -> {
            
            if (!e.getValueIsAdjusting()) {
                String selectedEspNamee = listEspecialitats.getSelectedValue(); // Obtiene el nombre seleccionado
                especialitatSeleccionada = cp.getEspecialitat(cp.getCodiEspecialitatPerNom(selectedEspNamee));
                selectedEspName = selectedEspNamee;
            }
        });
    }
}
